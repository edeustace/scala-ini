# --- Sample dataset

# --- !Ups

insert into user (email,name,password) values ('ed.eustace@gmail.com','ed eustace','password');
insert into user (email,name,password) values ('edeustace@yahoo.com','ed eustace','password');
insert into problem (id,name,description,body,level,category,user_email)
  values(10, 'Find attribuasdfasdte with value', 'Write a function that returns a list of nodes that contain an attribute with a given value',
    '
    import scala.xml._

   def getNodesWithAttributeValue( node : Node, stringVal : String ) : List[Node] = 
{
/*<*/
    def attributeValueEquals(value: String)(node: Node) = {
        node.attributes.exists(_.value.text == value)  
    }
    //get all nodes and subnodes
    val ns : NodeSeq = node \\ "_"
    ns.filter( attributeValueEquals(stringVal) ).toList
    /*>*/
}

    val xml = <div>
        <span class="test">hello</span>
        <div class="test"><p>hello</p></div>
      </div>
    
    val expected = List[Node](
              <span class="test">hello</span>, 
              <div class="test"><p>hello</p></div>
            )
    
    getNodesWithAttributeValue(xml, "test")   == expected
    ', 'easy', 'function', 'ed.eustace@gmail.com' );

insert into problem (id,name,description,body,level,category,user_email,solution)
  values(14, 'Update one node but not another', 'Write a function "updateVersion" that updates a version node if it is within a "subnode" node.',
'
import scala.xml._

val InputXml : Node =
<root>
    <subnode>
        <version>1</version>
    </subnode>
    <contents>
        <version>1</version>
    </contents>
</root>
// write method here
// updateVersion( node : Node ) : Node)
?

val updatedXml : Node = updateVersion(InputXml)
(updatedXml\"subnode"\"version" text)  == "2" && (updatedXml\"contents"\"version" text) == "1"

',
'easy', 
'function', 
'ed.eustace@gmail.com',
'
def updateVersion( node : Node ) : Node = {
   def updateElements( seq : Seq[Node]) : Seq[Node] = 
     for( subNode <- seq ) yield updateVersion( subNode )  

   node match {
     case <root>{ ch @ _* }</root> => <root>{ updateElements( ch ) }</root>
     case <subnode>{ ch @ _* }</subnode> => <subnode>{ updateElements( ch ) }</subnode>
     case <version>{ contents }</version> => <version>2</version>
     case other @ _ => other
   }
 }
');


insert into problem (id,name,description,body,level,category,user_email)
  values(15, 'Multiple evaluates test', 'test',
'
/**
 * Anonymou functions
 */
val addOne = (x:Int) => x + 1
/*!evaluate*/
addOne(1) == ? && addOne(?) == 5


/**
 * Partially Applied Functions
 */
def adder(m: Int, n: Int) = m + n
val add2 = adder(2, _:Int)
/*!evaluate*/
add2(3) == ? && add2(?) == 7

/**
 * Curried Functions
 */
def multiply(m: Int)(n: Int): Int = m * n
val timesTwo = multiply(2)(_)

/*!evaluate*/
multiply(?)(3) == 9 && timesTwo(3) == ?


/**
 * You can also curry a normal function
 */
val curriedAdd = (adder(_,_)).curried
val plusThree = curriedAdd(3)(_)
/*!evaluate*/
plusThree(1) == 4 && curriedAdd(1)(2) == 3
', 'test', 'test', 'ed.eustace@gmail.com');

insert into user_solution (user_email,problem_id, solution)
		values ('ed.eustace@gmail.com',1, 'true');

insert into user_solution (user_email,problem_id, solution)
		values ('ed.eustace@gmail.com',2, '4');

# --- !Downs
delete from problem;
delete from user_solution;
delete from user;
